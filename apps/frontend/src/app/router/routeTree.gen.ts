/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './../../page/__root';
import { Route as LotusRouteImport } from './../../page/lotus/route';
import { Route as IndexImport } from './../../page/index';
import { Route as LotusIndexImport } from './../../page/lotus/index';
import { Route as LotusUserIndexImport } from './../../page/lotus/user/index';
import { Route as LotusDetailIndexImport } from './../../page/lotus/detail/index';

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')();

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute
} as any).lazy(() => import('./../../page/about.lazy').then((d) => d.Route));

const LotusRouteRoute = LotusRouteImport.update({
  id: '/lotus',
  path: '/lotus',
  getParentRoute: () => rootRoute
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute
} as any);

const LotusIndexRoute = LotusIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LotusRouteRoute
} as any);

const LotusUserIndexRoute = LotusUserIndexImport.update({
  id: '/user/',
  path: '/user/',
  getParentRoute: () => LotusRouteRoute
} as any);

const LotusDetailIndexRoute = LotusDetailIndexImport.update({
  id: '/detail/',
  path: '/detail/',
  getParentRoute: () => LotusRouteRoute
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/lotus': {
      id: '/lotus';
      path: '/lotus';
      fullPath: '/lotus';
      preLoaderRoute: typeof LotusRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/about': {
      id: '/about';
      path: '/about';
      fullPath: '/about';
      preLoaderRoute: typeof AboutLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/lotus/': {
      id: '/lotus/';
      path: '/';
      fullPath: '/lotus/';
      preLoaderRoute: typeof LotusIndexImport;
      parentRoute: typeof LotusRouteImport;
    };
    '/lotus/detail/': {
      id: '/lotus/detail/';
      path: '/detail';
      fullPath: '/lotus/detail';
      preLoaderRoute: typeof LotusDetailIndexImport;
      parentRoute: typeof LotusRouteImport;
    };
    '/lotus/user/': {
      id: '/lotus/user/';
      path: '/user';
      fullPath: '/lotus/user';
      preLoaderRoute: typeof LotusUserIndexImport;
      parentRoute: typeof LotusRouteImport;
    };
  }
}

// Create and export the route tree

interface LotusRouteRouteChildren {
  LotusIndexRoute: typeof LotusIndexRoute;
  LotusDetailIndexRoute: typeof LotusDetailIndexRoute;
  LotusUserIndexRoute: typeof LotusUserIndexRoute;
}

const LotusRouteRouteChildren: LotusRouteRouteChildren = {
  LotusIndexRoute: LotusIndexRoute,
  LotusDetailIndexRoute: LotusDetailIndexRoute,
  LotusUserIndexRoute: LotusUserIndexRoute
};

const LotusRouteRouteWithChildren = LotusRouteRoute._addFileChildren(LotusRouteRouteChildren);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/lotus': typeof LotusRouteRouteWithChildren;
  '/about': typeof AboutLazyRoute;
  '/lotus/': typeof LotusIndexRoute;
  '/lotus/detail': typeof LotusDetailIndexRoute;
  '/lotus/user': typeof LotusUserIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/about': typeof AboutLazyRoute;
  '/lotus': typeof LotusIndexRoute;
  '/lotus/detail': typeof LotusDetailIndexRoute;
  '/lotus/user': typeof LotusUserIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/lotus': typeof LotusRouteRouteWithChildren;
  '/about': typeof AboutLazyRoute;
  '/lotus/': typeof LotusIndexRoute;
  '/lotus/detail/': typeof LotusDetailIndexRoute;
  '/lotus/user/': typeof LotusUserIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/lotus' | '/about' | '/lotus/' | '/lotus/detail' | '/lotus/user';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/about' | '/lotus' | '/lotus/detail' | '/lotus/user';
  id: '__root__' | '/' | '/lotus' | '/about' | '/lotus/' | '/lotus/detail/' | '/lotus/user/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  LotusRouteRoute: typeof LotusRouteRouteWithChildren;
  AboutLazyRoute: typeof AboutLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LotusRouteRoute: LotusRouteRouteWithChildren,
  AboutLazyRoute: AboutLazyRoute
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/lotus",
        "/about"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/lotus": {
      "filePath": "lotus/route.tsx",
      "children": [
        "/lotus/",
        "/lotus/detail/",
        "/lotus/user/"
      ]
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/lotus/": {
      "filePath": "lotus/index.tsx",
      "parent": "/lotus"
    },
    "/lotus/detail/": {
      "filePath": "lotus/detail/index.tsx",
      "parent": "/lotus"
    },
    "/lotus/user/": {
      "filePath": "lotus/user/index.tsx",
      "parent": "/lotus"
    }
  }
}
ROUTE_MANIFEST_END */
